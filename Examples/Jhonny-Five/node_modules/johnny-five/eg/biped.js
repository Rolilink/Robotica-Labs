var five = require("../lib/johnny-five.js"),
    __ = require("../lib/fn.js"),
    board, Biped, biped, servos;


/**
 * Biped
 * @param {Object} opts Optional properties object
 */
function Biped( opts ) {

  var right, left;

  opts = opts || {};

  // Boe Biped continuous are calibrated to stop at 90Â°
  this.center = opts.center || 90;

  right = opts.right;
  left = opts.left;

  // Initialize the right and left cooperative servos
  this.servos = {
    right: {
      upper: right.upper ? new five.Servo( right.upper ) : null,
      lower: right.lower ? new five.Servo( right.lower ) : null
    },
    left: {
      upper: left.upper ? new five.Servo( left.upper ) : null,
      lower: left.lower ? new five.Servo( left.lower ) : null
    }
  };

  // Set the initial servo cooperative direction
  this.direction = opts.direction || {
    right: {
      upper: this.center,
      lower: this.center
    },
    left:  {
      upper: this.center,
      lower: this.center
    }
  };

  // Store a recallable history of movement
  // TODO: Include in savable history
  this.history = [];

  // Initial direction
  this.which = "forward";

  // Initial stepping foot
  this.foot = "left";

  // Wait 10ms, send fwd pulse on, then off to
  // "wake up" the servos
  // setTimeout(function() {
  //   this.fwd(1).fwd(0);
  // }.bind(this), 10);
}


Biped.POS_MAP = {
  // Direction
  forward: {
    // Foot
    right: {
      right: {
        upper: 110,
        lower: 100
      },
      left: {
        upper: 110,
        lower: 100
      }
    },
    // Foot
    left: {
      right: {
        upper: 70,
        lower: 80
      },
      left: {
        upper: 70,
        lower: 80
      }
    }
  },
  stop: {
    // Foot
    right: {
      right: {
        upper: 90,
        lower: 90
      },
      left: {
        upper: 90,
        lower: 90
      }
    }
  },
  stride: {
    range: {
      upper: [ 75, 105 ],
      lower: [ 80, 100 ]
    }
  }
};


/**
 * stride Move the bot in an arbitrary direction over time
 * @param  {Object} positions left/right upper/lower positions
 * @return {Object} this
 */
Biped.prototype.stride = function() {
  // Cooperative servo motion.
  // Servos are mounted opposite of each other,
  // the values for left and right will be in
  // opposing directions.

  // 1. get current positions
  // 2. calculate size of upper for each step
  // 3. loop steps until complete

  var upper, lower, stepu, stepl, range, start;

  upper = 90;

  lower = 90;

  // Steps per interval
  stepu = 2;
  stepl = 2;

  // Stride range
  range = Biped.POS_MAP.stride.range;

  start = Date.now();


  five.Board.prototype.loop.call( this, 50, function() {

    // Calculate the next step position
    if ( upper >= range.upper[1] || upper <= range.upper[0] ) {
      stepu *= -1;
    }

    // Update the position in upper
    upper += stepu;

    this.servos.right.upper.move( upper );
    this.servos.left.upper.move( upper );
  });

  five.Board.prototype.loop.call( this, 100, function() {

    if ( lower >= range.lower[1] || lower <= range.lower[0] ) {
      stepl *= -1;
    }

    lower -= stepl;

    this.servos.right.lower.move( lower );
    this.servos.left.lower.move( lower );

  });


  return this;
};

/**
 * move Move the bot in an arbitrary direction
 * @param  {Object} positions left/right upper/lower positions
 * @return {Object} this
 */
Biped.prototype.move = function( positions ) {

  // console.log( this.foot );
  // console.log( this.which );

  // Cooperative servo motion.

  [ "right", "left" ].forEach(function( foot ) {
    Object.keys( positions[ foot ] ).forEach(function( section ) {
      this.servos[ foot ][ section ].move( positions[ foot ][ section ] );
    }, this );
  }, this );


  // Push a record object into the history
  this.history.push({
    timestamp: Date.now(),
    foot: this.foot,
    right: positions.right,
    left: positions.left
  });

  return this;
};



/**
 * stop Stops the bot, regardless of current direction
 * @return {Object} this
 */
Biped.prototype.stop = function() {

  this.which = "stop";
  this.foot = "right";

  return this.move(
    Biped.POS_MAP[ this.which ][ this.foot ]
  );
};


/**
 * step Take a step with either foot
 * @return {Object} this
 */
Biped.prototype.step = function( foot ) {

  // Ignore duplicate step instructions
  if ( this.foot === foot ) {
    return;
  }

  this.which = "forward";
  this.foot = foot || ( this.foot !== "right" ? "right" : "left" );

  console.log( "MOVE: ", Biped.POS_MAP[ this.which ][ this.foot ] );
  this.move(
    Biped.POS_MAP[ this.which ][ this.foot ]
  );
};







// Begin program when the board, serial and
// firmata are connected and ready

(board = new five.Board()).on("ready", function() {

  biped = new Biped({
    right: {
      upper: 9,
      lower: 11
    },
    left: {
      upper: 10,
      lower: 12
    }
  });

  this.repl.inject({
    b: biped
  });

  // biped.stop();
  biped.stride();
});
